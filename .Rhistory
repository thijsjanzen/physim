mu0 <- 0
lambda1 <- 0
mu1 <- 0.0
trans_rate <- 0.1
max_t <- 5
found <- c()
for (r in 1:1000) {
t1 <- Sys.time()
focal_tree <- PBD::pbd_sim(pars = c(lambda0,
trans_rate,
lambda1,
mu0,
mu1),
age = max_t,
soc = 2,
plotit = FALSE)$stree_random
t2 <- Sys.time()
focal_tree2 <- physim::sim_pbd(lambda0 = lambda0,
mu0 = mu0,
lambda1 = lambda1,
mu1 = mu1,
completion_rate = trans_rate,
max_t = max_t)
t3 <- Sys.time()
to_add <- c(length(focal_tree$tip.label), length(focal_tree2$tip.label),
difftime(t2, t1, units = "secs"),
difftime(t3, t2, units = "secs"))
cat(to_add, "\n")
found <- rbind(found, to_add)
}
colnames(found) <- c("PBD", "physim", "t_PBD", "t_physim_rcpp")
library(tidyverse)
found <- as_tibble(found)
p1 <- found %>%
gather(key = "model", value = "num_lin", -c(t_PBD, t_physim_rcpp)) %>%
ggplot(aes(x = num_lin, fill = model)) +
geom_density(alpha = 0.5) +
scale_x_log10()
p2 <- found %>%
gather(key = "model", value = "num_lin", -c(physim, PBD)) %>%
ggplot(aes(x = num_lin, fill = model)) +
geom_density(alpha = 0.5) +
scale_x_log10() +
xlab("runtime")
egg::ggarrange(p1, p2)
lambda0 <- 1
mu0 <- 0
lambda1 <- 1
mu1 <- 0.0
trans_rate <- 1
max_t <- 5
found <- c()
for (r in 1:1000) {
t1 <- Sys.time()
focal_tree <- PBD::pbd_sim(pars = c(lambda0,
trans_rate,
lambda1,
mu0,
mu1),
age = max_t,
soc = 2,
plotit = FALSE)$stree_random
t2 <- Sys.time()
focal_tree2 <- physim::sim_pbd(lambda0 = lambda0,
mu0 = mu0,
lambda1 = lambda1,
mu1 = mu1,
completion_rate = trans_rate,
max_t = max_t)
t3 <- Sys.time()
to_add <- c(length(focal_tree$tip.label), length(focal_tree2$tip.label),
difftime(t2, t1, units = "secs"),
difftime(t3, t2, units = "secs"))
cat(to_add, "\n")
found <- rbind(found, to_add)
}
found <- c()
for (r in 1:100) {
t1 <- Sys.time()
focal_tree <- PBD::pbd_sim(pars = c(lambda0,
trans_rate,
lambda1,
mu0,
mu1),
age = max_t,
soc = 2,
plotit = FALSE)$stree_random
t2 <- Sys.time()
focal_tree2 <- physim::sim_pbd(lambda0 = lambda0,
mu0 = mu0,
lambda1 = lambda1,
mu1 = mu1,
completion_rate = trans_rate,
max_t = max_t)
t3 <- Sys.time()
to_add <- c(length(focal_tree$tip.label), length(focal_tree2$tip.label),
difftime(t2, t1, units = "secs"),
difftime(t3, t2, units = "secs"))
cat(to_add, "\n")
found <- rbind(found, to_add)
}
colnames(found) <- c("PBD", "physim", "t_PBD", "t_physim_rcpp")
library(tidyverse)
found <- as_tibble(found)
p1 <- found %>%
gather(key = "model", value = "num_lin", -c(t_PBD, t_physim_rcpp)) %>%
ggplot(aes(x = num_lin, fill = model)) +
geom_density(alpha = 0.5) +
scale_x_log10()
p2 <- found %>%
gather(key = "model", value = "num_lin", -c(physim, PBD)) %>%
ggplot(aes(x = num_lin, fill = model)) +
geom_density(alpha = 0.5) +
scale_x_log10() +
xlab("runtime")
egg::ggarrange(p1, p2)
library(physim)
library(physim)
crown_age <- 30
sim_func <- function(params) {
# this is a bit annoying, most C++ functions have the order shuffled:
sim_tree <- physim::pbd_sim_rcpp(pars = c(params[1], # b1
params[5],   #c1
params[2], #b2
params[3], #mu1
params[4]), #mu2),
age = crown_age)
if (inherits(sim_tree, "phylo")) {
return(sim_tree)
} else {
return("failure")
}
}
emp_tree <- sim_func(params = c(0.1, 0.1, 0.0, 0.0, 0.1))
prior_means <- c(10, 10, 100, 100, 1)
prior_func <- function() {
return(physim::draw_from_prior_rcpp(prior_means))
}
prior_dens_func <- function(params) {
return(physim::prior_dens_rcpp(prior_means, params))
}
stat_func <- function(focal_tree) {
res <- treestats::calc_all_stats(focal_tree)
# statistics for rquartet and wiener are quite large, and often cause problems:
index <- which(names(res) == "rquartet")
res <- res[-index]
index <- which(names(res) == "wiener")
res <- res[-index]
return(res)
}
num_lin <- treestats::number_of_lineages(emp_tree)
ref_tree = emp_tree
min_lin = num_lin * 0.5
max_lin = num_lin * 1.5
statistics = stat_func
simulation_function = sim_func
init_epsilon_value = 10000
prior_generating_function = prior_func
prior_density_function = prior_dens_func
prior_means = prior_means
number_of_particles = 100
sigma = 0.05
stop_rate = 1e-3
num_iterations = 3
num_threads = 8
if (!inherits(ref_tree, "phylo")) {
# Just checking
stop("abc_smc_nltt: ",
"tree must be of class 'phylo', ",
"but was of type '", class(ref_tree), "' instead")
}
#just to get the number of parameters to be estimated.
parameters <- prior_generating_function()
num_parameters <- length(parameters)
# compute the observed statistics
obs_statistics <- statistics(ref_tree)
#generate a matrix with epsilon values
#we assume that the SMC algorithm converges within 50 iterations
epsilon <- init_epsilon_value * exp(-0.5 * 0:num_iterations)
#store weights
new_weights <- c()
new_params <- list(c(seq_along(parameters)))
previous_weights <- c()
previous_params  <- list(c(seq_along(parameters)))
indices <- 1:number_of_particles
stats <- c()
all_res <- list()
# first we do the initial generation from the prior
cat("\nGenerating from the prior\n")
RcppParallel::setThreadOptions(numThreads = num_threads)
sim_result <- physim::create_ref_table_tbb_par(num_repl = number_of_particles,
prior_means = prior_means,
crown_age = crown_age,
min_lin = min_lin,
max_lin = max_lin)
sim_result
new_params <- sim_result$parameters
new_weights <- rep(1, number_of_particles)
cat("\nGenerating Particles for iteration\t", gen, "\n")
cat("0--------25--------50--------75--------100\n")
cat("*")
utils::flush.console()
print_frequency <- 20
tried <- 0
number_accepted <- 0
#replace all vectors
if (gen > 1) {
#normalize the weights and store them as previous weights.
previous_weights <- new_weights / sum(new_weights)
new_weights <- c() #remove all currently stored weights
previous_params <- new_params # store found params
new_params <- matrix(nrow = number_of_particles,
ncol = num_parameters) #clear new params
}
stoprate_reached <- FALSE
gen <- 2
#replace all vectors
if (gen > 1) {
#normalize the weights and store them as previous weights.
previous_weights <- new_weights / sum(new_weights)
new_weights <- c() #remove all currently stored weights
previous_params <- new_params # store found params
new_params <- matrix(nrow = number_of_particles,
ncol = num_parameters) #clear new params
}
stoprate_reached <- FALSE
#in this initial step, generate parameters from the prior
if (gen == 1) {
parameters <- prior_generating_function()
} else {
#if not in the initial step, generate parameters
#from the weighted previous distribution:
index <- sample(x = indices, size = 1,
replace = TRUE, prob = previous_weights)
parameters <- previous_params[index, ]
#only perturb one parameter, to avoid extremely
#low acceptance rates due to simultaneous perturbation
to_change <- sample(seq_along(parameters), 1)
# perturb the parameter a little bit,
#on log scale, so parameter doesn't go < 0
eta <- log(parameters[to_change]) + stats::rnorm(1, 0, sigma)
parameters[to_change] <- exp(eta)
}
parameters
prior_density_function(parameters)
dexp(parameters, rate = prior_means)
prod(dexp(parameters, rate = prior_means))
#simulate a new tree, given the proposed parameters
new_tree <- simulation_function(parameters)
new_tree
stats <- statistics(new_tree)
#check if the summary statistics are sufficiently
#close to the observed summary statistics
#
accept <- TRUE
diff <- stats - obs_statistics
diff
rel_diff <- (diff * diff) / abs(obs_statistics)
rel_diff
plot(rel_diff)
epsilon[gen]
misses <- rel_diff > epsilon[gen]
#in this initial step, generate parameters from the prior
if (gen == 1) {
parameters <- prior_generating_function()
} else {
#if not in the initial step, generate parameters
#from the weighted previous distribution:
index <- sample(x = indices, size = 1,
replace = TRUE, prob = previous_weights)
parameters <- previous_params[index, ]
#only perturb one parameter, to avoid extremely
#low acceptance rates due to simultaneous perturbation
to_change <- sample(seq_along(parameters), 1)
# perturb the parameter a little bit,
#on log scale, so parameter doesn't go < 0
eta <- log(parameters[to_change]) + stats::rnorm(1, 0, sigma)
parameters[to_change] <- exp(eta)
}
#simulate a new tree, given the proposed parameters
new_tree <- simulation_function(parameters)
stats <- statistics(new_tree)
#check if the summary statistics are sufficiently
#close to the observed summary statistics
#
accept <- TRUE
diff <- stats - obs_statistics
rel_diff <- (diff * diff) / abs(obs_statistics)
plot(rel_diff)
misses <- rel_diff > epsilon[gen]
misses
sum(misses, na.rm = TRUE)
number_accepted <- number_accepted + 1
new_params[number_accepted, ] <- parameters
accepted_weight <- 1
accepted_weight <- calculate_weight(previous_weights,
previous_params, parameters,
sigma, prior_density_function)
calculate_weight <- function(weights,
particles,
current,
sigma,
prior_density_function) {
vals <- c()
for (i in seq_len(nrow(particles))) {
vals[i] <- log(weights[i])
diff <- log(current) - log(particles)
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- vals[i] + sum(prob_diff)
}
vals <- exp(vals)
numerator <- prior_density_function(current)
return(numerator / sum(vals))
}
accepted_weight <- calculate_weight(previous_weights,
previous_params, parameters,
sigma, prior_density_function)
accepted_weight
previous_weights
previous_params
parameters
sigma
weights <- previous_weights
particles <- previous_params
current <- parmaeteres
current <- parameters
sigma
prior_density_function
vals <- c()
for (i in seq_len(nrow(particles))) {
vals[i] <- log(weights[i])
diff <- log(current) - log(particles)
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- vals[i] + sum(prob_diff)
}
vals
particles
vals <- c()
for (i in seq_len(nrow(particles))) {
vals[i] <- log(weights[i])
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- vals[i] + sum(prob_diff)
}
vals
vals <- 0
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals
vals <- exp(sum(vals))
vals
log(weights)
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
prob_diff
sum(prob_diff)
plot(prob_diff)
vals <- 0
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals
max(vals)
vals <- sum(exp(vals))
vals
vals
vals <- 0
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals <- c()
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals
exp(vals)
i <- 10
diff <- log(current) - log(particles[i, ])
diff
stats::dnorm(diff, mean = 0, sd = sigma)
vals <- c()
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals <- sum(exp(vals))
numerator <- prior_density_function(current)
numerator
vals
numerator / vals
calculate_weight <- function(weights,
particles,
current,
sigma,
prior_density_function) {
vals <- c()
for (i in seq_len(nrow(particles))) {
diff <- log(current) - log(particles[i, ])
prob_diff <- stats::dnorm(diff, mean = 0, sd = sigma, log = TRUE)
vals[i] <- log(weights[i]) + sum(prob_diff)
}
vals <- sum(exp(vals))
numerator <- prior_density_function(current)
return(numerator / vals)
}
res <- physim::abc_smc(ref_tree = emp_tree,
min_lin = num_lin * 0.5,
max_lin = num_lin * 1.5,
statistics = stat_func,
simulation_function = sim_func,
init_epsilon_value = 10000,
prior_generating_function = prior_func,
prior_density_function = prior_dens_func,
prior_means = prior_means,
number_of_particles = 100,
sigma = 0.05,
stop_rate = 1e-3,
num_iterations = 3,
num_threads = 8)
to_plot <- c()
for (r in 1:length(res$all_parameters)) {
focal_iter <- res$all_parameters[[r]]
focal_iter <- cbind(focal_iter, r)
to_plot <- rbind(to_plot, focal_iter)
}
colnames(to_plot) <- c("lambda0", "lambda1", "mu0",
"mu1", "compl_rate", "repl")
require(tidyverse)
to_plot <- as_tibble(to_plot)
to_plot %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
ggplot(aes(x = repl, y = val, group = repl, fill = as.factor(repl))) +
geom_boxplot() +
scale_y_log10() +
facet_wrap(~parameter, scales = "free")
to_plot %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
ggplot(aes(x = repl, y = val, group = repl, fill = (repl))) +
geom_boxplot() +
scale_y_log10() +
facet_wrap(~parameter, scales = "free")
to_plot %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
ggplot(aes(x = repl, y = val, group = repl, fill = (repl))) +
geom_boxplot() +
scale_y_log10() +
facet_grid(rows = vars(parameter), scales = "free") +
theme_classic()
to_plot
# mean estimates:
to_plot %>%
filter(repl == max(to_plot$repl))
# mean estimates:
to_plot %>%
filter(repl == max(to_plot$repl)) %>%
gather(key = "parameter", value = "val", -c(repl))
# mean estimates:
to_plot %>%
filter(repl == max(to_plot$repl)) %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
group_by(parameter) %>%
summarise("mean_val" = mean(val))
to_plot %>%
filter(repl == max(to_plot$repl)) %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
group_by(parameter) %>%
summarise("mean_val" = mean(val),
"mode_val" = mode(val))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
to_plot %>%
filter(repl == max(to_plot$repl)) %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
group_by(parameter) %>%
summarise("mean_val" = mean(val),
"mode_val" = Mode(val))
x <- to_plot$lambda0
plot(x)
plot(density(x))
y <- density(x)
y$x[which.max(y$y)]
y <- density(x, bw = "SJ")
y$x[which.max(y$y)]
Mode <- function(x) {
y <- density(x, bw = "SJ")
return(y$x[which.max(y$y)])
}
to_plot %>%
filter(repl == max(to_plot$repl)) %>%
gather(key = "parameter", value = "val", -c(repl)) %>%
group_by(parameter) %>%
summarise("mean_val" = mean(val),
"mode_val" = Mode(val))
knitr::opts_chunk$set(echo = TRUE)
PBD::pbd_ML(brts = treestats::branching_times(emp_tree))
res <- PBD::pbd_ML(brts = treestats::branching_times(emp_tree))
?PBD::pbd_ML
res <- PBD::pbd_ML(brts = treestats::branching_times(emp_tree),
initparsopt = c(0.1, 1e-8, 0.1))
res
